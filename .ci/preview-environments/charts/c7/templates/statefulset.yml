---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: optimize
  labels: {{ include "commonLabels" $ | nindent 4 }}
  annotations: {{ include "commonAnnotations" $ | nindent 4 }}
spec:
  replicas: 1
  serviceName: {{ .Values.global.labels.app }}
  selector:
    matchLabels:
      app: {{ .Values.global.labels.app }}
  template:
    metadata:
      labels: {{ include "commonLabels" $ | nindent 8 }}
    spec:
      nodeSelector:
        cloud.google.com/gke-nodepool: previews
      tolerations:
      - key: "previews"
        operator: "Exists"
        effect: "NoSchedule"
      imagePullSecrets:
      - name: registry-camunda-cloud
      volumes:
      - name: configuration
        configMap:
          name: optimize-configmap
          defaultMode: 0555
      initContainers:
      - name: init-sysctl
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 1
            memory: 300Mi
      - name: init-permissions
        image: busybox
        command: ["chown", "1000:1000", "-R", "/usr/share/elasticsearch/data"]
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 1
            memory: 300Mi
        volumeMounts:
        - name: esdata
          mountPath: /usr/share/elasticsearch/data
      containers:
      - name: optimize
        image: "{{ .Values.optimize.image.repository }}:{{ .Values.optimize.image.tag }}"
        imagePullPolicy: Always
        env:
        - name: OPTIMIZE_JAVA_OPTS
          value: |
            -Xms1g
            -Xmx1g
            -XX:MaxMetaspaceSize=256m
        - name: WAIT_FOR_TIMEOUT
          value: "60"
        - name: WAIT_FOR
          value: "localhost:9300"
        - name: CONTAINER_ACCESS_URL
          value: https://{{ include "ingress.domain" $ }}
        - name: CAMUNDA_OPTIMIZE_EMAIL_ENABLED
          value: "true"
        - name: CAMUNDA_OPTIMIZE_EMAIL_ADDRESS
          value: "optimize@camunda.com"
        - name: CAMUNDA_OPTIMIZE_EMAIL_HOSTNAME
          value: "localhost"
        - name: CAMUNDA_OPTIMIZE_EMAIL_PORT
          value: "1025"
        - name: CAMUNDA_OPTIMIZE_IMPORT_CUSTOMER_ONBOARDING
          value: "true"
        ports:
        - containerPort: 8090
          name: optimize-http
        livenessProbe:
          initialDelaySeconds: 60
          periodSeconds: 30
          httpGet:
            path: /
            port: optimize-http
        readinessProbe:
          initialDelaySeconds: 60
          periodSeconds: 30
          httpGet:
            path: /api/readyz
            port: optimize-http
        resources:
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
        - name: configuration
          mountPath: /optimize/config/environment-config.yaml
          subPath: environment-config.yaml
        - name: configuration
          mountPath: /optimize/config/OptimizeLicense.txt
          subPath: OptimizeLicense.txt

      - name: cambpm
        image: "{{ .Values.cambpm.image.repository }}:{{ .Values.cambpm.image.tag }}"
        imagePullPolicy: Always
        command: ["/camunda/configure-and-run.sh"]
        env:
        - name: JAVA_OPTS
          value: "-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m"
        - name: WAIT_FOR
          value: "localhost:5432"
        - name: SKIP_DB_CONFIG
          value: "true"
        ports:
        - containerPort: 8080
          name: cambpm-http
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          httpGet:
            path: /engine-rest/engine
            port: cambpm-http
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          httpGet:
            path: /engine-rest/engine
            port: cambpm-http
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
        volumeMounts:
        - name: configuration
          mountPath: /camunda/conf/bpm-platform.xml
          subPath: bpm-platform.xml
        - name: configuration
          mountPath: /camunda/conf/server.xml
          subPath: server.xml
        - name: configuration
          mountPath: /camunda/configure-and-run.sh
          subPath: configure-and-run.sh

      - name: postgres
        image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
        env:
        - name: POSTGRES_USER
          value: camunda
        - name: POSTGRES_PASSWORD
          value: camunda123
        - name: POSTGRES_DB
          value: cambpm
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: database
        readinessProbe:
          tcpSocket:
            port: database
          initialDelaySeconds: 5
        resources:
          requests:
            cpu: "100m"
            memory: "512Mi"
          limits:
            cpu: "100m"
            memory: "512Mi"
        volumeMounts:
        - name: pgdata
          mountPath: /var/lib/postgresql/data
          readOnly: false

      - name: mailhog
        image: "{{ .Values.mailhog.image.repository }}:{{ .Values.mailhog.image.tag }}"
        env:
        - name: MH_UI_WEB_PATH
          value: mail
        ports:
        - containerPort: 1025
          name: mailhog-smtp
        - containerPort: 8025
          name: mailhog-http
        readinessProbe:
          exec:
            command: ["/usr/bin/nc", "-v", "localhost", "1025"]
          initialDelaySeconds: 30
          periodSeconds: 30
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 1
            memory: 500Mi

      - name: elasticsearch
        image: "{{ .Values.elasticsearch.image.repository }}:{{ .Values.elasticsearch.image.tag }}"
        env:
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.rmi.port=9010 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1"
        - name: cluster.name
          value: elasticsearch
        - name: discovery.type
          value: single-node
        - name: bootstrap.memory_lock
          value: "true"
        - name: xpack.security.enabled
          value: "false"
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
        ports:
        - containerPort: 9010
          name: jmx
        - containerPort: 9200
          name: es-http
        - containerPort: 9300
          name: es-transport
        livenessProbe:
          tcpSocket:
            port: es-transport
          initialDelaySeconds: 30
          periodSeconds: 15
        readinessProbe:
          tcpSocket:
            port: es-transport
          initialDelaySeconds: 30
          periodSeconds: 15
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
        volumeMounts:
        - name: configuration
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          subPath: elasticsearch.yml
        - name: esdata
          mountPath: /usr/share/elasticsearch/data
          readOnly: false

  volumeClaimTemplates:
  - metadata:
      name: pgdata
      labels: {{ include "commonLabels" $ | nindent 8 }}
      annotations: {{ include "commonAnnotations" $ | nindent 8 }}
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
  - metadata:
      name: esdata
      labels: {{ include "commonLabels" $ | nindent 8 }}
      annotations: {{ include "commonAnnotations" $ | nindent 8 }}
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
