<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.camunda.optimize</groupId>
    <artifactId>qa</artifactId>
    <version>8.6.0-SNAPSHOT</version>
  </parent>

  <artifactId>clustering-tests</artifactId>
  <packaging>pom</packaging>

  <properties>
    <skip.docker>true</skip.docker>
    <failOnMissingWebXml>false</failOnMissingWebXml>
    <optimize.importing.host>localhost</optimize.importing.host>
    <optimize.importing.port>8090</optimize.importing.port>
    <optimize.notImporting.host>localhost</optimize.notImporting.host>
    <optimize.notImporting.port>8190</optimize.notImporting.port>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpackCurrent</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <skip>${skip.docker}</skip>
              <artifact>io.camunda.optimize:camunda-optimize:${project.version}:tar.gz:production</artifact>
              <outputDirectory>${project.build.directory}/docker/optimize/distrib</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.3.1</version>
        <executions>
          <execution>
            <id>copy-docker-resources</id>
            <phase>process-classes</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/docker</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/docker</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>docker-build</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skip.docker}</skip>
              <executable>docker-compose</executable>
              <arguments>
                <argument>-f</argument>
                <argument>docker-compose.yml</argument>
                <argument>build</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>docker-start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <environmentVariables>
                <CAMBPM_VERSION>${camunda.engine.version}</CAMBPM_VERSION>
                <ES_VERSION>${elasticsearch.test.version}</ES_VERSION>
              </environmentVariables>
              <skip>${skip.docker}</skip>
              <executable>docker-compose</executable>
              <arguments>
                <argument>-f</argument>
                <argument>docker-compose.yml</argument>
                <argument>up</argument>
                <argument>-d</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>docker-remove</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skip.docker}</skip>
              <executable>docker-compose</executable>
              <arguments>
                <argument>-f</argument>
                <argument>docker-compose.yml</argument>
                <argument>rm</argument>
                <argument>-sfv</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>clustering-tests</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>run-import-with-one-instance-create-report-on-other</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>integration-test</phase>
                <configuration>
                  <target xmlns:ac="antlib:net.sf.antcontrib">
                    <echo message="Waiting for the importing Optimize to start..." />
                    <exec executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="until $(nc -zv ${optimize.importing.host} ${optimize.importing.port}); do sleep 2; done" />
                    </exec>

                    <echo message="Waiting for the not importing Optimize to start..." />
                    <exec executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="until $(nc -zv ${optimize.notImporting.host} ${optimize.notImporting.port}); do sleep 2; done" />
                    </exec>

                    <echo message="Waiting for Optimize to populate ES..." />
                    <exec executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="until test $(/bin/bash -c &quot;curl -s 'http://${optimize.importing.host}:${optimize.importing.port}/api/status' | jq '.engineStatus.\&quot;camunda-bpm\&quot;.isImporting'&quot;) = 'false'; do sleep 2; done" />
                    </exec>

                    <echo message="Authenticating with the not importing optimize instance..." />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="curl -s -o /dev/null -w &quot;%{http_code}&quot; -H 'Content-Type: application/json' --connect-to optimize.host::${optimize.notImporting.host}:${optimize.notImporting.port} -XPOST http://optimize.host/api/authentication --data-binary '{&quot;username&quot;:&quot;demo&quot;, &quot;password&quot;:&quot;demo&quot;}' -c authCookie" />
                    </exec>

                    <echo message="Creating a new report on api of not importing optimize instance..." />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true" outputproperty="report.id">
                      <arg value="-c" />
                      <arg value="curl -s -H 'Content-Type: application/json' --connect-to optimize.host::${optimize.notImporting.host}:${optimize.notImporting.port} -XPOST http://optimize.host/api/report/process/single -b authCookie | jq -r '.id'" />
                    </exec>
                    <echo message="Report id: ${report.id}" />

                    <echo message="Updating the new report on api of not importing optimize instance..." />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="curl -s -o /dev/null -w &quot;%{http_code}&quot; -H 'Content-Type: application/json' --connect-to optimize.host::${optimize.notImporting.host}:${optimize.notImporting.port} -XPUT http://optimize.host/api/report/process/single/${report.id} --data-binary '@../src/test/resources/sample-report.json' -b authCookie" />
                    </exec>

                    <echo message="Evaluating the new report on api of not importing optimize instance.." />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true" outputproperty="report.instance.count">
                      <arg value="-c" />
                      <arg value="curl -s --connect-to optimize.host::${optimize.notImporting.host}:${optimize.notImporting.port} -XPOST http://optimize.host/api/report/${report.id}/evaluate -b authCookie | jq -r '.result.instanceCount'" />
                    </exec>
                    <echo message="ProcessInstanceCount: ${report.instance.count}" />

                    <ac:if>
                      <not>
                        <equals arg1="${report.instance.count}" arg2="6" />
                      </not>
                      <ac:then>
                        <fail message="Wrong report instance count, expected 6." />
                      </ac:then>
                    </ac:if>
                  </target>
                </configuration>
              </execution>
              <execution>
                <id>use-auth-cookie-on-other-instance</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>integration-test</phase>
                <configuration>
                  <target>
                    <echo message="Waiting for the importing Optimize to start..." />
                    <exec executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="until $(nc -zv ${optimize.importing.host} ${optimize.importing.port}); do sleep 2; done" />
                    </exec>

                    <echo message="Waiting for the not importing Optimize to start..." />
                    <exec executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="until $(nc -zv ${optimize.notImporting.host} ${optimize.notImporting.port}); do sleep 2; done" />
                    </exec>

                    <echo message="Authenticating with the not importing optimize instance..." />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="curl -s -o /dev/null -w &quot;%{http_code}&quot; -H 'Content-Type: application/json' --connect-to optimize.host::${optimize.notImporting.host}:${optimize.notImporting.port} -XPOST http://optimize.host/api/authentication --data-binary '{&quot;username&quot;:&quot;demo&quot;, &quot;password&quot;:&quot;demo&quot;}' -c authCookie" />
                    </exec>

                    <echo message="Reading all reports from optimize api of importing instance with same cookie..." />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="curl -s -o /dev/null -w &quot;%{http_code}&quot; --connect-to optimize.host::${optimize.importing.host}:${optimize.importing.port} http://optimize.host/api/report?orderBy=lastModified -b authCookie" />
                    </exec>
                  </target>
                </configuration>
              </execution>
            </executions>
            <dependencies>
              <dependency>
                <groupId>ant-contrib</groupId>
                <artifactId>ant-contrib</artifactId>
                <version>1.0b3</version>
                <exclusions>
                  <exclusion>
                    <groupId>ant</groupId>
                    <artifactId>ant</artifactId>
                  </exclusion>
                </exclusions>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
