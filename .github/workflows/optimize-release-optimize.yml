name: Optimize Release Camunda Optimize to Camunda Nexus, DockerHub and internal Harbor registry.

on:
  schedule:
    - cron: "0 0 * * 1-5"
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        required: true
        description: "Version to release. Applied to pom.xml and Git tag"
        default: "0.0.0"
      DEVELOPMENT_VERSION:
        required: true
        description: "Next development version"
        default: "0.1.0-SNAPSHOT"
      BRANCH:
        required: true
        description: "The branch used for the release checkout"
        default: "release/0.0.0"
      ADDITIONAL_DOCKER_TAG:
        required: false
        description: "Any additional tag that should be added to the docker image"
      DOCKER_LATEST:
        required: true
        description: "Should the docker image be tagged as latest?"
        type: boolean
        default: true
      IS_DRY_RUN:
        required: true
        description: "Is this a dry run?"
        type: boolean
        default: true
      RELEASE_EXAMPLES:
        required: true
        description: "Update Optimize examples repository?"
        type: boolean
        default: false

jobs:
  build:
    name: Execute Release and Upload to Download Center
    runs-on: gcp-core-2-release
    env:
      DOCKER_IMAGE_TEAM: registry.camunda.cloud/optimize-ee/optimize
      DOCKER_IMAGE_DOCKER_HUB: camunda/optimize
      DOCKER_LATEST_TAG: latest
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
        with:
          fetch-depth: 0

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@d1720f055e0635fd932a1d2a48f87a666a57906c # v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/common/jenkins/downloads-camunda-cloud_google_sa_key DOWNLOAD_CENTER_GCLOUD_KEY_BYTES | GCP_CREDENTIALS_NAME;
            secret/data/products/optimize/ci/camunda-optimize GITHUB_OPTIMIZE_APP_ID;
            secret/data/products/optimize/ci/camunda-optimize GITHUB_OPTIMIZE_APP_KEY;
            secret/data/products/infra/ci/common CAMUNDA_NEXUS_USR;
            secret/data/products/infra/ci/common CAMUNDA_NEXUS_PSW;
            secret/data/products/optimize/ci/camunda-optimize REGISTRY_HUB_DOCKER_COM_USR;
            secret/data/products/optimize/ci/camunda-optimize REGISTRY_HUB_DOCKER_COM_PSW;

      - name: Log Input Variables
        run: |
          echo "RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}"
          echo "DEVELOPMENT_VERSION: ${{ inputs.DEVELOPMENT_VERSION }}"
          echo "BRANCH: ${{ inputs.BRANCH }}"
          echo "DOCKER_LATEST: ${{ inputs.DOCKER_LATEST }}"
          echo "ADDITIONAL_DOCKER_TAG: ${{ inputs.ADDITIONAL_DOCKER_TAG }}"
          echo "IS_DRY_RUN: ${{ inputs.IS_DRY_RUN }}"
          echo "RELEASE_EXAMPLES: ${{ inputs.RELEASE_EXAMPLES }}"

      - name: "Read Java / Version Info"
        id: "pom-info"
        uses: YunaBraska/java-info-action@main

      - name: Setup Maven
        uses: camunda/camunda-optimize/.github/actions/setup-maven@master
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Is current release major or manor.
        id: release-type
        env:
          RELEASE_VERSION: ${{ github.event.inputs.RELEASE_VERSION || '0.0.0' }}
        run: |
          is_major_or_minor="false"
          is_patch="true"
          is_rc="true"
          is_alpha="true"
          patch_version=$(echo "$RELEASE_VERSION" | cut -d. -f3)
          if [[ ! "$patch_version" == *"-"* ]] && [[ "$patch_version" == "0" ]]; then
            is_major_or_minor="true"
            is_patch="false"
            echo "is_patchr=$is_patch"
            echo "is_major_or_minor=$is_major_or_minor"
          fi
          if [[ ! $RELEASE_VERSION =~ rc[0-9]+$ ]]; then
            is_rc="false"
          fi
          if [[ ! $RELEASE_VERSION =~ alpha[0-9]+$ ]]; then
            is_alpha="false"
          fi
          echo "is_major_or_minor=$is_major_or_minor" >> "$GITHUB_OUTPUT"
          echo "is_patch=$is_patch" >> "$GITHUB_OUTPUT"
          echo "is_rc=$is_rc" >> "$GITHUB_OUTPUT"
          echo "is_alpha=$is_alpha" >> "$GITHUB_OUTPUT"

      - name: Generate a GitHub token
        id: github-token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2
        with:
          app_id: ${{ steps.secrets.outputs.GITHUB_OPTIMIZE_APP_ID }}
          private_key: ${{ steps.secrets.outputs.GITHUB_OPTIMIZE_APP_KEY }}

      - name: Install common tooling (buildx) # required on self-hosted runners
        uses: camunda/infra-global-github-actions/common-tooling@main
        with:
          buildx-enabled: true
          java-enabled: false
          node-enabled: false
          python-enabled: false
          yarn-enabled: false

      - name: Define common variables
        id: define-values
        uses: ./.github/actions/git-environment

      - name: Expose common variables as Env
        run: |
          {
            echo "DOCKER_LATEST=${{ github.event.inputs.DOCKER_LATEST || true}}"
            echo "ADDITIONAL_DOCKER_TAG=${{ github.event.inputs.ADDITIONAL_DOCKER_TAG || '' }}"
            echo "DEVELOPMENT_VERSION=${{ github.event.inputs.DEVELOPMENT_VERSION || '0.1.0-SNAPSHOT' }}"
            echo "RELEASE_VERSION=${{ github.event.inputs.RELEASE_VERSION || '0.0.0' }}"
            echo "VERSION=${{ github.event.inputs.RELEASE_VERSION || '0.0.0' }}"
            echo "BRANCH=${{ github.event.inputs.BRANCH || github.ref_name }}"
            echo "REVISION=${{ steps.define-values.outputs.git_commit_hash }}"
            echo "MAJOR_OR_MINOR=${{ steps.release-type.outputs.is_major_or_minor }}"
            echo "IS_PATCH=${{ steps.release-type.outputs.is_patch }}"
            echo "IS_ALPHA=${{ steps.release-type.outputs.is_alpha }}"
            echo "IS_RC=${{ steps.release-type.outputs.is_rc }}"
            echo "IS_DRY_RUN=${{ github.event.inputs.IS_DRY_RUN || 'true' }}"
          } >> "$GITHUB_ENV"

      # When it's neither a dry run nor a release candidate it means we are running the workflow from the proper branch.
      # Generating changelog and creating a draft release will only work on the proper branch.
      - name: Generate changelog
        if: env.IS_DRY_RUN == 'false' && env.IS_RC == 'false'
        uses: ./.github/actions/generate-changelog
        id: changelog
        with:
          branch: ${{ env.BRANCH }}

      - name: Login to prod Harbor docker registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
        with:
          registry: registry.camunda.cloud
          username: ${{ steps.secrets.outputs.CAMUNDA_NEXUS_USR }}
          password: ${{ steps.secrets.outputs.CAMUNDA_NEXUS_PSW }}

      - name: Login to docker hub
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
        with:
          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}

      - name: Run Maven
        shell: bash
        env:
          GITHUB_APP_PRIVATE_KEY: ${{ steps.github-token.outputs.token }}
          GITHUB_APP_ID: ${{ steps.secrets.outputs.GITHUB_OPTIMIZE_APP_ID }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_ACTOR_ID: ${{ github.actor_id }}
          GITHUB_TOKEN: ${{ steps.github-token.outputs.token }}
        run: |
          .github/scripts/execute-release.sh

      # This still needs changing once we are on prod
      - name: Upload artifact to Camunda Download Center
        if: env.IS_DRY_RUN == 'false'
        uses: camunda/infra-global-github-actions/download-center-upload@main
        with:
          gcp_credentials: ${{ steps.secrets.outputs.GCP_CREDENTIALS_NAME }}
          ee: "true"
          env: "prod"
          version: ${{ github.event.inputs.RELEASE_VERSION }}
          artifact_file: target/checkout/optimize-distro/target/*.{tar.gz,zip}
          repo_name: "optimize"

      - name: Auto-update previous version
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_ACTOR_ID: ${{ github.actor_id }}
          GITHUB_APP_PRIVATE_KEY: ${{ steps.github-token.outputs.token }}
          GITHUB_APP_ID: ${{ steps.secrets.outputs.GITHUB_OPTIMIZE_APP_ID }}
        run: |
          git checkout ${{ github.ref_name }}
          .github/scripts/update-previous-version.sh

      - name: Build Docker Image
        run: |
          .github/scripts/build-release-docker-image.sh

      - name: Start Smoketest
        uses: ./.github/actions/compose
        with:
          compose_file: ${{ github.workspace }}/.github/actions/compose/docker-compose.smoketest.release.yml
          project_name: smoketest
        env:
          OPTIMIZE_IMAGE_TAG: ${{ github.event.inputs.RELEASE_VERSION }}
          ELASTIC_VERSION: ${{ steps.pom-info.outputs.x_elasticsearch8_test_version }}
          CAMBPM_HOST: "172.17.0.1"
          CAMBPM_PORT:
            "8080"
            # ^ starting ~2023-10-10, the hostname resolution for the cambpm docker-compose service
            # http://cambpm:8080 does not work anymore for neither SaaS nor self-hosted Linux runners.
            # 172.17.0.1 is the host IP address from the container perspective, and cambpm is running
            # exposed there on port 8080.

      - name: Execute health check and push docker image
        uses: ./.github/actions/execute-healthcheck-and-push-image
        with:
          version: ${{ env.VERSION }}
          date: ${{ env.DATE }}
          revision: ${{ env.REVISION }}

      - name: Create a draft release
        if: env.IS_DRY_RUN == 'false' && env.IS_RC == 'false'
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"${{ env.RELEASE_VERSION }}","target_commitish":"${{ github.sha }}","name":"${{ env.RELEASE_VERSION }}","body":${{ toJson(steps.changelog.outputs.changelog) }},"draft":true,"prerelease":${{ env.IS_ALPHA == 'true' }},"generate_release_notes":false,"make_latest":"${{ env.DOCKER_LATEST }}"}'

      - name: Docker log dump
        uses: ./.github/actions/docker-logs
        with:
          archive_name: deploy-artifacts-docker

      - name: Checkout Optimize examples
        if: inputs.RELEASE_EXAMPLES == true
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
        with:
          token: ${{ steps.github-token.outputs.token }}
          repository: camunda/camunda-optimize-examples
          path: camunda-optimize-examples
          ref: master

      - name: Trigger release examples repo
        if: inputs.RELEASE_EXAMPLES == true
        working-directory: camunda-optimize-examples
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_ACTOR_ID: ${{ github.actor_id }}
          GITHUB_APP_PRIVATE_KEY: ${{ steps.github-token.outputs.token }}
          GITHUB_APP_ID: ${{ steps.secrets.outputs.GITHUB_OPTIMIZE_APP_ID }}
        run: |
          ../.github/scripts/update_example_repo.sh
