name: Optimize Command Assign DRI
on:
  repository_dispatch:
    types: [assign-command]
jobs:
  optimize-assign-command:
    name: Assign DRI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4

      - name: Create URL to the run output
        id: vars
        run: |
          {
            echo "project_id=101"
            echo "run_url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          } >> "$GITHUB_OUTPUT"

      - name: Generate a GitHub token
        id: github-token
        uses: camunda/infra-global-github-actions/generate-github-app-token-from-vault-secrets@main
        with:
          github-app-id-vault-key: GITHUB_OPTIMIZE_APP_ID
          github-app-id-vault-path: secret/data/products/optimize/ci/camunda-optimize
          github-app-private-key-vault-key: GITHUB_OPTIMIZE_APP_KEY
          github-app-private-key-vault-path: secret/data/products/optimize/ci/camunda-optimize
          vault-auth-method: approle
          vault-auth-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-auth-secret-id: ${{ secrets.VAULT_SECRET_ID}}
          vault-url: ${{ secrets.VAULT_ADDR }}

      - name: Dump the client payload context
        env:
          PAYLOAD_CONTEXT: ${{ toJson(github.event.client_payload) }}
        run: echo "$PAYLOAD_CONTEXT"

      - name: Parse args
        id: parse-args
        run: |
          ARG1=${{ github.event.client_payload.slash_command.args.unnamed.arg1 }}
          ASSIGNEE="${ARG1//@/}"
          {
            echo "arg1=${ARG1}"
            echo "assignee=${ASSIGNEE}"
          } >> "$GITHUB_OUTPUT"

      - name: Get issue project
        id: issue-project
        env:
          ISSUE_URL: ${{ github.event.client_payload.github.payload.issue.html_url }}
          PROJECT_ID: ${{ steps.vars.outputs.project_id }}
          PROJECT_OWNER: ${{ github.event.client_payload.github.payload.organization.login }}
          GITHUB_TOKEN: ${{ steps.github-token.outputs.token }}
        run: ./.github/scripts/commands/get-issue-project-data.sh

      - name: Validate inputs
        run: |
          # General checks
          if [ -z "${{ steps.parse-args.outputs.arg1 }}" ]; then
            echo "No command provided"
            exit 1
          fi
          if [ "${{ steps.issue-project.outputs.is_in_project }}" != "true" ]; then
            echo "Issue is not part of the '${{ steps.issue-project.outputs.project_title }}' project"
            exit 1
          fi


          # Validate 'assign' command
          if [ -z "${{ steps.parse-args.outputs.assignee }}" ]; then
            echo "No assignee provided"
            exit 1
          fi

      - name: Replace assignee
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "${{ steps.parse-args.outputs.assignee }}" ]; then
            echo "No assignee provided"
            exit 1
          fi
          gh issue edit ${{ github.event.client_payload.github.payload.issue.html_url }} --remove-assignee ""
          sleep 2  # avoiding race condition between two commands
          gh issue edit ${{ github.event.client_payload.github.payload.issue.html_url }} --add-assignee ${{ steps.parse-args.outputs.assignee }}

      - name: Get and update issue description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract the issue description
          ISSUE_DESCRIPTION=$(gh issue view ${{ github.event.client_payload.github.payload.issue.html_url }} --json body --jq '.body')

          # Remove the Engineering DRI from the description (either with an assignee or without)
          ISSUE_DESCRIPTION=$(echo "$ISSUE_DESCRIPTION" | sed "/Engineering DRI: @\w\+[[:space:]]*$/d")
          ISSUE_DESCRIPTION=$(echo "$ISSUE_DESCRIPTION" | sed "/Engineering DRI:[[:space:]]*$/d")

          # Add new assignee at the beginning of the description (if there were exactly the same assignee already it will be replaced anyway)
          ISSUE_DESCRIPTION=$(echo -e "Engineering DRI: @${{ steps.parse-args.outputs.assignee }}\\n\\n${ISSUE_DESCRIPTION}")

          # Update the issue description
          gh issue edit ${{ github.event.client_payload.github.payload.issue.html_url }} --body "${ISSUE_DESCRIPTION}"

      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ steps.github-token.outputs.token }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reactions: "+1"
          reactions-edit-mode: replace

      - name: Update comment in case of failure
        if: failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            > Had issues fulfilling your command, check the [logs](${{ steps.vars.outputs.run_url }})
          reactions: confused
